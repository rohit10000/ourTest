{"ast":null,"code":"import { addUser } from \"../contextAPI/actions\";\nexport const register = (state, setShow, dispatch, history) => {\n  let email = document.getElementById(\"email\").value;\n  let firstname = document.getElementById(\"firstname\").value;\n  let lastname = document.getElementById(\"lastname\").value;\n  let password = document.getElementById(\"password\").value;\n\n  const checkEmail = (email, users) => {\n    let numberOfUsers = users.length;\n\n    for (let i = 0; i < numberOfUsers; i++) {\n      if (email == users[i].email) return true;\n    }\n\n    return false;\n  };\n\n  let emailExists = checkEmail(email, state.users);\n\n  if (emailExists) {\n    console.log(\"Email is already registered.\");\n    setShow(true);\n  } else {\n    let userInfo = {\n      \"firstname\": firstname,\n      \"lastname\": lastname,\n      \"email\": email,\n      \"password\": password\n    };\n    fetch('http://localhost:5000/users/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userInfo)\n    }).then(response => response.json()).then(data => {\n      console.log('successfully Registered', data);\n      addUser(data, dispatch);\n      history.push(\"/\");\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n};\nexport const login = (state, setShow, setError, dispatch, history) => {\n  let email = document.getElementById(\"email\").value;\n  let password = document.getElementById(\"password\").value;\n\n  function checkEmailAndPassword(email, users, password) {\n    let numberOfUsers = users.length;\n\n    for (let i = 0; i < numberOfUsers; i++) {\n      if (email == users[i].email) {\n        if (password == users[i].password) {\n          dispatch({\n            type: \"UPDATE_USER_ID\",\n            item: users[i]._id\n          });\n          return true;\n        } else {\n          setError(\"Invalid Email/Password\");\n          return false;\n        }\n      }\n    }\n\n    setError(\"EmailId not found\");\n    return false;\n  }\n\n  let isValid = checkEmailAndPassword(email, state.users, password);\n\n  if (isValid) {\n    setUser();\n  } else {\n    setShow(true);\n  }\n};","map":{"version":3,"sources":["/home/rohit/Public/test_system_frontend/src/utility/authenticateUtility.js"],"names":["addUser","register","state","setShow","dispatch","history","email","document","getElementById","value","firstname","lastname","password","checkEmail","users","numberOfUsers","length","i","emailExists","console","log","userInfo","fetch","method","headers","body","JSON","stringify","then","response","json","data","push","catch","error","login","setError","checkEmailAndPassword","type","item","_id","isValid","setUser"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,uBAAtB;AAEA,OAAO,MAAOC,QAAQ,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiBC,QAAjB,EAA2BC,OAA3B,KAAsC;AAC3D,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,KAA7C;AACA,MAAIC,SAAS,GAAGH,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAArD;AACA,MAAIE,QAAQ,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KAAnD;AACA,MAAIG,QAAQ,GAAGL,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KAAnD;;AAEA,QAAMI,UAAU,GAAG,CAACP,KAAD,EAAQQ,KAAR,KAAkB;AACjC,QAAIC,aAAa,GAAGD,KAAK,CAACE,MAA1B;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,aAAf,EAA8BE,CAAC,EAA/B,EAAkC;AAC9B,UAAGX,KAAK,IAAIQ,KAAK,CAACG,CAAD,CAAL,CAASX,KAArB,EACI,OAAO,IAAP;AACP;;AACD,WAAO,KAAP;AACH,GAPD;;AASA,MAAIY,WAAW,GAAGL,UAAU,CAACP,KAAD,EAAQJ,KAAK,CAACY,KAAd,CAA5B;;AAEA,MAAGI,WAAH,EAAe;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAjB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAHD,MAII;AACA,QAAIkB,QAAQ,GAAG;AACX,mBAAaX,SADF;AAEX,kBAAYC,QAFD;AAGX,eAASL,KAHE;AAIX,kBAAYM;AAJD,KAAf;AAOAU,IAAAA,KAAK,CAAC,oCAAD,EAAuC;AACxCC,MAAAA,MAAM,EAAE,MADgC;AAExCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAF+B;AAKxCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;AALkC,KAAvC,CAAL,CAOKO,IAPL,CAOUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPtB,EAQKF,IARL,CAQUG,IAAI,IAAI;AACVZ,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCW,IAAvC;AAEA/B,MAAAA,OAAO,CAAC+B,IAAD,EAAO3B,QAAP,CAAP;AAEAC,MAAAA,OAAO,CAAC2B,IAAR,CAAa,GAAb;AACH,KAdL,EAeKC,KAfL,CAeYC,KAAD,IAAW;AACdf,MAAAA,OAAO,CAACe,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACH,KAjBL;AAkBH;AACJ,CAhDM;AAkDP,OAAO,MAAMC,KAAK,GAAG,CAACjC,KAAD,EAAQC,OAAR,EAAiBiC,QAAjB,EAA2BhC,QAA3B,EAAqCC,OAArC,KAAiD;AAClE,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,KAA7C;AACA,MAAIG,QAAQ,GAAGL,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KAAnD;;AAEA,WAAS4B,qBAAT,CAA+B/B,KAA/B,EAAsCQ,KAAtC,EAA6CF,QAA7C,EAAsD;AAClD,QAAIG,aAAa,GAAGD,KAAK,CAACE,MAA1B;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,aAAf,EAA8BE,CAAC,EAA/B,EAAkC;AAC9B,UAAGX,KAAK,IAAIQ,KAAK,CAACG,CAAD,CAAL,CAASX,KAArB,EAA2B;AACvB,YAAGM,QAAQ,IAAIE,KAAK,CAACG,CAAD,CAAL,CAASL,QAAxB,EAAiC;AAC7BR,UAAAA,QAAQ,CAAC;AACLkC,YAAAA,IAAI,EAAE,gBADD;AAELC,YAAAA,IAAI,EAAEzB,KAAK,CAACG,CAAD,CAAL,CAASuB;AAFV,WAAD,CAAR;AAIA,iBAAO,IAAP;AACH,SAND,MAOI;AACAJ,UAAAA,QAAQ,CAAC,wBAAD,CAAR;AACA,iBAAO,KAAP;AACH;AACJ;AACJ;;AACDA,IAAAA,QAAQ,CAAC,mBAAD,CAAR;AACA,WAAO,KAAP;AACH;;AAED,MAAIK,OAAO,GAAGJ,qBAAqB,CAAC/B,KAAD,EAAQJ,KAAK,CAACY,KAAd,EAAqBF,QAArB,CAAnC;;AACA,MAAG6B,OAAH,EAAW;AACPC,IAAAA,OAAO;AAEV,GAHD,MAII;AACAvC,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ,CAjCM","sourcesContent":["import {addUser} from \"../contextAPI/actions\";\n\nexport const  register = (state, setShow, dispatch, history) =>{\n    let email = document.getElementById(\"email\").value;\n    let firstname = document.getElementById(\"firstname\").value;\n    let lastname = document.getElementById(\"lastname\").value;\n    let password = document.getElementById(\"password\").value;\n\n    const checkEmail = (email, users) => {\n        let numberOfUsers = users.length;\n        for(let i=0; i<numberOfUsers; i++){\n            if(email == users[i].email)\n                return true;\n        }\n        return false;\n    }\n\n    let emailExists = checkEmail(email, state.users);\n\n    if(emailExists){\n        console.log(\"Email is already registered.\");\n        setShow(true);\n    }\n    else{\n        let userInfo = {\n            \"firstname\": firstname,\n            \"lastname\": lastname,\n            \"email\": email,\n            \"password\": password\n        };\n\n        fetch('http://localhost:5000/users/signup', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userInfo),\n        })\n            .then(response => response.json())\n            .then(data => {\n                console.log('successfully Registered', data);\n\n                addUser(data, dispatch);\n\n                history.push(\"/\");\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n}\n\nexport const login = (state, setShow, setError, dispatch, history) => {\n    let email = document.getElementById(\"email\").value;\n    let password = document.getElementById(\"password\").value;\n\n    function checkEmailAndPassword(email, users, password){\n        let numberOfUsers = users.length;\n        for(let i=0; i<numberOfUsers; i++){\n            if(email == users[i].email){\n                if(password == users[i].password){\n                    dispatch({\n                        type: \"UPDATE_USER_ID\",\n                        item: users[i]._id\n                    });\n                    return true;\n                }\n                else{\n                    setError(\"Invalid Email/Password\");\n                    return false;\n                }\n            }\n        }\n        setError(\"EmailId not found\");\n        return false;\n    }\n\n    let isValid = checkEmailAndPassword(email, state.users, password);\n    if(isValid){\n        setUser()\n\n    }\n    else{\n        setShow(true);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}