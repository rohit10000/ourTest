{"ast":null,"code":"var _jsxFileName = \"/home/rohit/Public/test_system_frontend/src/components/QuizFooter.js\";\nimport React, { useState } from \"react\";\nimport \"./QuizFooter.css\";\nimport { setActiveQuestion, updateAnsweredQuestions, updateVisitedQuestions, updateYourAnswer } from \"../contextAPI/actions\";\nimport { useStateValue } from \"../contextAPI/StateProvider\";\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\n\nfunction QuizFooter() {\n  const [state, dispatch] = useStateValue();\n  const [isModalOpen, toggleModel] = useState(false);\n\n  const updateState = () => {\n    updateVisitedQuestions(parseInt(state.activeQuestion) - 1, dispatch);\n    let element = document.getElementById(state.activeQuestion);\n    let userAnswer = (element.querySelector('input[name=question' + state.activeQuestion + ']:checked') || {}).value;\n\n    if (userAnswer != undefined) {\n      updateYourAnswer(userAnswer, dispatch);\n    } else {\n      updateYourAnswer(0, dispatch);\n    }\n\n    if (userAnswer != undefined) {\n      updateAnsweredQuestions(true, dispatch);\n    } else {\n      updateAnsweredQuestions(false, dispatch);\n    }\n\n    let k = parseInt(state.activeQuestion) % state.topicDetails.questions.length + 1;\n    setActiveQuestion(k, dispatch);\n  };\n\n  const clearResponse = () => {\n    for (let i = 0; i < 4; i++) {\n      document.getElementById(state.activeQuestion + \"_\" + (parseInt(i) + 1)).checked = false;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quizFooter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isModalOpen,\n    toggle: () => toggleModel(!isModalOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"Instructions\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quizFooter__left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: clearResponse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"Clear Response\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: updateState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, \"Save & Next\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quizFooter__right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: () => {\n      toggleModel(!isModalOpen);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, \"Instructions\")));\n}\n\nexport default QuizFooter;","map":{"version":3,"sources":["/home/rohit/Public/test_system_frontend/src/components/QuizFooter.js"],"names":["React","useState","setActiveQuestion","updateAnsweredQuestions","updateVisitedQuestions","updateYourAnswer","useStateValue","Modal","ModalBody","ModalHeader","QuizFooter","state","dispatch","isModalOpen","toggleModel","updateState","parseInt","activeQuestion","element","document","getElementById","userAnswer","querySelector","value","undefined","k","topicDetails","questions","length","clearResponse","i","checked"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport \"./QuizFooter.css\";\nimport {\n    setActiveQuestion,\n    updateAnsweredQuestions,\n    updateVisitedQuestions,\n    updateYourAnswer\n} from \"../contextAPI/actions\";\n\nimport {useStateValue} from \"../contextAPI/StateProvider\";\nimport {Modal, ModalBody, ModalHeader} from \"reactstrap\";\n\nfunction QuizFooter(){\n\n    const [state, dispatch] = useStateValue();\n\n    const [isModalOpen, toggleModel] = useState(false);\n\n\n    const updateState = () => {\n\n        updateVisitedQuestions(parseInt(state.activeQuestion) - 1, dispatch);\n\n        let element = document.getElementById(state.activeQuestion);\n\n        let userAnswer = (element\n            .querySelector('input[name=question'+state.activeQuestion+']:checked')||{}).value;\n\n        if(userAnswer!=undefined){\n\n            updateYourAnswer(userAnswer, dispatch);\n\n        }\n        else{\n            updateYourAnswer(0, dispatch);\n        }\n\n        if(userAnswer != undefined){\n            updateAnsweredQuestions(true, dispatch);\n        }else{\n            updateAnsweredQuestions(false, dispatch);\n        }\n\n        let k = (parseInt(state.activeQuestion) % state.topicDetails.questions.length)+1;\n        setActiveQuestion(k, dispatch);\n    }\n\n    const clearResponse = () =>{\n        for(let i = 0; i<4; i++){\n            document.getElementById(state.activeQuestion+\"_\"+(parseInt(i)+1)).checked = false;\n        }\n    }\n    return(\n\n        <div className={\"quizFooter\"}>\n            <Modal isOpen={isModalOpen} toggle={() => toggleModel(!isModalOpen)}>\n                <ModalHeader>Instructions</ModalHeader>\n                <ModalBody>\n\n\n                </ModalBody>\n            </Modal>\n            <div className={\"quizFooter__left\"}>\n                <button className=\"btn btn-primary\" onClick={clearResponse}>Clear Response</button>\n                <button className=\"btn btn-primary\" onClick={updateState}>Save & Next</button>\n            </div>\n\n            <div className={\"quizFooter__right\"}>\n                <button className={\"btn btn-primary\"} onClick={() => {toggleModel(!isModalOpen)}}>Instructions</button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default QuizFooter;\n"]},"metadata":{},"sourceType":"module"}